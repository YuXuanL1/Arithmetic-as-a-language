# -*- coding: utf-8 -*-
"""NLP_HW2_NCCU_110306085.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nolUZgM_xv4NB2jLfj0hejFkhbqATWYl

# LSTM-arithmetic

## Dataset
- [Arithmetic dataset](https://drive.google.com/file/d/1cMuL3hF9jefka9RyF4gEBIGGeFGZYHE-/view?usp=sharing)
"""

from google.colab import drive
drive.mount('/content/drive')

# ! pip install seaborn
! pip install opencc
# ! pip install -U scikit-learn

import numpy as np
import pandas as pd
import torch
import torch.nn
import torch.nn.utils.rnn
import torch.utils.data
import matplotlib.pyplot as plt
import seaborn as sns
import opencc
import os
from sklearn.model_selection import train_test_split

data_path = '/content/drive/MyDrive/colab'

df_train = pd.read_csv(os.path.join(data_path, 'arithmetic_train.csv'))
df_eval = pd.read_csv(os.path.join(data_path, 'arithmetic_eval.csv'))
df_train.head()

# transform the input data to string
df_train['tgt'] = df_train['tgt'].apply(lambda x: str(x))
df_train['src'] = df_train['src'].add(df_train['tgt'])
df_train['len'] = df_train['src'].apply(lambda x: len(x))

df_eval['tgt'] = df_eval['tgt'].apply(lambda x: str(x))
df_eval['src'] = df_eval['src'].add(df_eval['tgt'])
df_eval['len'] = df_eval['src'].apply(lambda x: len(x))

df_train.head()

"""# Build Dictionary
 - The model cannot perform calculations directly with plain text.
 - Convert all text (numbers/symbols) into numerical representations.
 - Special tokens
    - '&lt;pad&gt;'
        - Each sentence within a batch may have different lengths.
        - The length is padded with '&lt;pad&gt;' to match the longest sentence in the batch.
    - '&lt;eos&gt;'
        - Specifies the end of the generated sequence.
        - Without '&lt;eos&gt;', the model will not know when to stop generating.
"""

# write your code here
# Build a dictionary and give every token in the train dataset an id
# The dictionary should contain <eos> and <pad>
# char_to_id is to conver charactors to ids, while id_to_char is the opposite

char_to_id = {
    '<pad>': 0,
    '<eos>': 1,
    '0': 2,
    '1': 3,
    '2': 4,
    '3': 5,
    '4': 6,
    '5': 7,
    '6': 8,
    '7': 9,
    '8': 10,
    '9': 11,
    '+': 12,
    '-': 13,
    '*': 14,
    '(': 15,
    ')': 16,
    '=': 17
}

id_to_char = {
    0: '<pad>',
    1: '<eos>',
    2:'0',
    3:'1',
    4:'2',
    5:'3',
    6:'4',
    7:'5',
    8:'6',
    9:'7',
    10:'8',
    11:'9',
    12:'+',
    13:'-',
    14:'*',
    15:'(',
    16:')',
    17:'='
}

vocab_size = len(char_to_id)
print('Vocab size:{}'.format(vocab_size))

"""# Data Preprocessing
 - The data is processed into the format required for the model's input and output.
 - Example: 1+2-3=0
     - Model input: 1 + 2 - 3 = 0
     - Model output: / / / / / 0 &lt;eos&gt;  (the '/' can be replaced with &lt;pad&gt;)
     - The key for the model's output is that the model does not need to predict the next character of the previous part. What matters is that once the model sees '=', it should start generating the answer, which is '0'. After generating the answer, it should also generate&lt;eos&gt;

"""

# Write your code here
def encode_equation(equation, answer):

    all_chars = [char_to_id[char] for char in equation]
    all_chars.append(char_to_id['<eos>'])

    eq_pos = equation.index('=')

    output_chars = [char_to_id['<pad>']] * (eq_pos + 1)  #等號前用pad填充
    output_chars += [char_to_id[char] for char in answer]  #加上答案
    output_chars.append(char_to_id['<eos>'])  #加上結束標籤

    return all_chars, output_chars

# chatGPT:將結果加入 df_train 的新欄位
def add_encoded_columns(df):
    all_chars_list = []  # 用來儲存所有的 IDs
    output_ids_list = []  # 用來儲存輸出 IDs

    for i in range(len(df)):
        equation = df['src'].iloc[i]
        answer = df['tgt'].iloc[i]

        all_chars, output_ids = encode_equation(equation, answer)

        all_chars_list.append(all_chars)
        output_ids_list.append(output_ids)

    # 將新欄位添加到 DataFrame
    df['char_id_list'] = all_chars_list
    df['label_id_list'] = output_ids_list

df_train = df_train.drop(columns=['Unnamed: 0'], errors='ignore')
df_eval = df_eval.drop(columns=['Unnamed: 0'], errors='ignore')
add_encoded_columns(df_train)
add_encoded_columns(df_eval)

df_train.head()

"""# Hyper Parameters

|Hyperparameter|Meaning|Value|
|-|-|-|
|`batch_size`|Number of data samples in a single batch|64|
|`epochs`|Total number of epochs to train|10|
|`embed_dim`|Dimension of the word embeddings|256|
|`hidden_dim`|Dimension of the hidden state in each timestep of the LSTM|256|
|`lr`|Learning Rate|0.001|
|`grad_clip`|To prevent gradient explosion in RNNs, restrict the gradient range|1|
"""

batch_size = 64
epochs = 2
embed_dim = 256
hidden_dim = 256
lr = 0.001
grad_clip = 1

"""# Data Batching
- Use `torch.utils.data.Dataset` to create a data generation tool called  `dataset`.
- The, use `torch.utils.data.DataLoader` to randomly sample from the `dataset` and group the samples into batches.
"""

class Dataset(torch.utils.data.Dataset):
    def __init__(self, sequences):
        self.sequences = sequences

    def __len__(self):
        # return the amount of data
        return len(self.sequences) # Write your code here

    def __getitem__(self, index):
        # Extract the input data x and the ground truth y from the data
        x = self.sequences.iloc[index]['char_id_list'][:-1] # Write your code here
        y = self.sequences.iloc[index]['label_id_list'][1:] # Write your code here
        return x, y

# collate function, used to build dataloader
def collate_fn(batch):
    batch_x = [torch.tensor(data[0]) for data in batch]
    batch_y = [torch.tensor(data[1]) for data in batch]
    batch_x_lens = torch.LongTensor([len(x) for x in batch_x])
    batch_y_lens = torch.LongTensor([len(y) for y in batch_y])

    # Pad the input sequence
    pad_batch_x = torch.nn.utils.rnn.pad_sequence(batch_x,
                                                  batch_first=True,
                                                  padding_value=char_to_id['<pad>'])

    pad_batch_y = torch.nn.utils.rnn.pad_sequence(batch_y,
                                                  batch_first=True,
                                                  padding_value=char_to_id['<pad>'])

    return pad_batch_x, pad_batch_y, batch_x_lens, batch_y_lens

ds_train = Dataset(df_train[['char_id_list', 'label_id_list']])
ds_eval = Dataset(df_eval[['char_id_list', 'label_id_list']])

# Build dataloader of train set and eval set, collate_fn is the collate function
dl_train = torch.utils.data.DataLoader(ds_train, batch_size, shuffle=True, collate_fn=collate_fn) # Write your code here
dl_eval = torch.utils.data.DataLoader(ds_eval, batch_size, shuffle=False, collate_fn=collate_fn) # Write your code here

"""# Model Design

## Execution Flow
1. Convert all characters in the sentence into embeddings.
2. Pass the embeddings through an LSTM sequentially.
3. The output of the LSTM is passed into another LSTM, and additional layers can be added.
4. The output from all time steps of the final LSTM is passed through a Fully Connected layer.
5. The character corresponding to the maximum value across all output dimensions is selected as the next character.

## Loss Function
Since this is a classification task, Cross Entropy is used as the loss function.

## Gradient Update
Adam algorithm is used for gradient updates.
"""

class CharRNN(torch.nn.Module):
    def __init__(self, vocab_size, embed_dim, hidden_dim):
        super(CharRNN, self).__init__()

        self.embedding = torch.nn.Embedding(num_embeddings=vocab_size,
                                            embedding_dim=embed_dim,
                                            padding_idx=char_to_id['<pad>'])

        self.rnn_layer1 = torch.nn.LSTM(input_size=embed_dim,
                                        hidden_size=hidden_dim,
                                        batch_first=True)

        self.rnn_layer2 = torch.nn.LSTM(input_size=hidden_dim,
                                        hidden_size=hidden_dim,
                                        batch_first=True)

        self.linear = torch.nn.Sequential(torch.nn.Linear(in_features=hidden_dim,
                                                          out_features=hidden_dim),
                                          torch.nn.ReLU(),
                                          torch.nn.Linear(in_features=hidden_dim,
                                                          out_features=vocab_size))

    def forward(self, batch_x, batch_x_lens):
        return self.encoder(batch_x, batch_x_lens)

    # The forward pass of the model
    def encoder(self, batch_x, batch_x_lens):
        batch_x = self.embedding(batch_x)

        batch_x = torch.nn.utils.rnn.pack_padded_sequence(batch_x,
                                                          batch_x_lens,
                                                          batch_first=True,
                                                          enforce_sorted=False)

        batch_x, _ = self.rnn_layer1(batch_x)
        batch_x, _ = self.rnn_layer2(batch_x)

        batch_x, _ = torch.nn.utils.rnn.pad_packed_sequence(batch_x,
                                                            batch_first=True)

        batch_x = self.linear(batch_x)

        return batch_x

    def generator(self, start_char, max_len=200):

        char_list = [char_to_id[c] for c in start_char]
        next_char = None

        while len(char_list) < max_len:
            # Write your code here # ChatGPT

            # # Pack the char_list to tensor
            # x = torch.tensor([char_list], dtype=torch.long).to(self.embedding.weight.device)
            # x_lens = torch.tensor([len(char_list)], dtype=torch.long).to(self.embedding.weight.device)

            # # Input the tensor to the embedding layer, LSTM layers, linear respectively
            # x = self.embedding(x) # 通過embedding層
            # x, _ = self.rnn_layer1(x) # 通過LSTM層
            # x, _ = self.rnn_layer2(x)
            # x = self.linear(x) # 通過線性層
            # y = x[:, -1, :] # Obtain the next token prediction y
            # next_char = torch.argmax(y, dim=-1).item() # Use argmax function to get the next token prediction

            # 將輸入轉換為tensor並設置長度
            x = torch.tensor([char_list], dtype=torch.long).to(self.embedding.weight.device)
            x_lens = torch.tensor([len(char_list)]).to(self.embedding.weight.device)
            # 使用encoder函數進行預測
            output = self.forward(x, x_lens)
            # 獲取最後一個時間步的預測
            y = output[:, -1, :]  # 取batch中第一個序列的最後一個時間步
            # 使用argmax獲取下一個字符
            next_char = torch.argmax(y).item()

            if next_char == char_to_id['<eos>']:
                break

            char_list.append(next_char)

        return [id_to_char[ch_id] for ch_id in char_list]

torch.manual_seed(2)


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') # Write your code here. Specify a device (cuda or cpu)

model = CharRNN(vocab_size,
                embed_dim,
                hidden_dim)

criterion = torch.nn.CrossEntropyLoss(ignore_index=char_to_id['<pad>']) # Write your code here. Cross-entropy loss function. The loss function should ignore <pad>
optimizer = torch.optim.Adam(model.parameters()) # Write your code here. Use Adam or AdamW for Optimizer

"""# Training
1. The outer `for` loop controls the `epoch`
    1. The inner `for` loop uses `data_loader` to retrieve batches.
        1. Pass the batch to the `model` for training.
        2. Compare the predicted results `batch_pred_y` with the true labels `batch_y` using Cross Entropy to calculate the loss `loss`
        3. Use `loss.backward` to automatically compute the gradients.
        4. Use `torch.nn.utils.clip_grad_value_` to limit the gradient values between `-grad_clip` &lt; and &lt; `grad_clip`.
        5. Use `optimizer.step()` to update the model (backpropagation).
2.  After every `1000` batches, output the current loss to monitor whether it is converging.
"""

from tqdm import tqdm
from copy import deepcopy
model = model.to(device)
model.train()
i = 0
for epoch in range(1, epochs+1):
    # The process bar
    bar = tqdm(dl_train, desc=f"Train epoch {epoch}")
    for batch_x, batch_y, batch_x_lens, batch_y_lens in bar:
        # Write your code here
        # Clear the gradient
        optimizer.zero_grad()

        # Write your code here
        # chatGPT: Forward pass with teacher forcing
        batch_pred_y = model(batch_x.to(device), batch_x_lens)

        # Compute loss
        loss = criterion(batch_pred_y.view(-1, vocab_size), batch_y.view(-1).to(device))

        # Back propagation
        loss.backward()

        torch.nn.utils.clip_grad_value_(model.parameters(), grad_clip) # gradient clipping

        # Write your code here
        # Optimize parameters in the model
        optimizer.step()

        i+=1
        if i%50==0:
            bar.set_postfix(loss = loss.item())

    # Evaluate your model
    model.eval() # Set model to evaluation mode # ChatGPT
    bar = tqdm(dl_eval, desc=f"Validation epoch {epoch}")
    matched = 0
    total = 0
    for batch_x, batch_y, batch_x_lens, batch_y_lens in bar:
        with torch.no_grad(): # Disable gradient computation during evaluation
            predictions = model(batch_x.to(device), batch_x_lens) # Write your code here. Input the batch_x to the model and generate the predictions

            # Write your code here. # ChatGPT
            # Check whether the prediction match the ground truths
            # Compute exact match (EM) on the eval dataset
            # EM = correct/total

            # Get the indices of the max log-probability
            pred_labels = predictions.argmax(dim=-1)
            # Ignore padding: create a mask for non-padding tokens
            mask = (batch_y != char_to_id['<pad>'])
            mask = mask.to(device)
            # Compare predictions with the actual labels
            correct = (pred_labels == batch_y.to(device)) & mask

            # Exact Match (EM) calculation for each batch
            matched += correct.sum().item()
            total += mask.sum().item()

    print(matched/total)
    model.train()  # Set model back to training mode for the next epoch

"""# Generation
Use `model.generator` and provide an initial character to automatically generate a sequence.
"""

model = model.to("cpu")
print("".join(model.generator('1+1=')))

